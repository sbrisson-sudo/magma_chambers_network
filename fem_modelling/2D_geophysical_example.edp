// Dimensions
real L = 80e3 ;  // horizontal size of the domain (x)
real H = 40e3 ;  // vertical size of the domain (y)

// Elastic constants
real E = 25e9 ;     // Young's modulus
real nu = 0.25 ;     // Poisson's ratio
real G = E/(2*(1+nu )) ; // shear modulus
real lambda = E*nu/((1+nu)*(1-2*nu)) ; // Lame constant

// Magma chamber
real Rmc = 2e3 ;    // Magma chamber radius
real dP = 1e5;      // Overpressure
real zmc = 6e3;     // Depth 

// First define boundaries 
border Top(t=L/2,-L/2){x=t;y=0;} 
border Left(t=0,-H){x=-L/2;y=t;}
border Bottom(t=-L/2,L/2){x=t;y=-H;}
border Right(t=-H,0){x=L/2;y=t;}
border MagmaChamber(t=0,-2*pi){x=Rmc*cos(t);y=-zmc+Rmc*sin(t);}


// Create mesh 
int nx = 200; // number of mesh nodes on the outer borders 
int nz = 100; // number of mesh nodes on the outer borders 
int nmc = 60;
mesh Th = buildmesh (Right(nz)+Top(nx)+Left(nz)+Bottom(nx)+MagmaChamber(nmc));

plot(Th, wait=true);

// Fespace
fespace Vh(Th, [P1, P1]);
Vh [u1, v1];
Vh [u2, v2];

fespace Stress(Th, P0); // piecewise constants
Stress sigmaxx, sigmayy, sigmaxy, p;

// Macro
real sqrt2 = sqrt(2.);
macro epsilon(u1, u2) [dx(u1), dy(u2), (dy(u1)+dx(u2))/sqrt2] //
macro div(u,v) (dx(u) + dy(v)) //


// macro for strain 
macro e(u1,u2)
	[
		dx(u1),
		(dy(u1)+dx(u2))/2 ,
		(dx(u2)+dy(u1))/2 , 
		dy(u2)
	]//eps_xx, eps_xy , eps_yx , eps_yy
// macro for stress 
macro sigma(u1,u2)
	[
		(lambda+2.*G)*e(u1,u2)[0]+lambda*e(u1,u2)[3],
		2.*G*e(u1,u2)[1],
		2.*G*e(u1,u2)[2],
		lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3]
	] //stress s_xx, s_xy, s_yx, s_yy



// Problem
solve Elasticity ([u1, v1], [u2, v2])
    = int2d(Th)(
          lambda*div(u1,v1)*div(u2,v2)
        + 2.*G*( epsilon(u1,v1)'*epsilon(u2,v2) )
    )
    + int1d(Th,MagmaChamber)(dP*(N.x*u2+N.y*v2))
    + on(Bottom, u1=0, v1=0)
    // + on(Right, dx(u1)+0.5*(dy(u1)+dx(v1))=0)
    // + on(Left, dx(u1)+0.5*(dy(u1)+dx(v1))=0)
    ;

// Stresses 
sigmaxx = sigma(u1,u2)[0];
sigmayy = sigma(u1,u2)[3]; 
sigmaxy = sigma(u1,u2)[1];
p = sqrt(sigmaxx^2 + sigmayy^2);

// Plot 
plot([u1, v1], wait=true);

plot(p,fill=1, cmm="Stress sigmaxy",wait=1,value=true);


// Extract value at surface
// int nCut = 100;
// y = 0;
// ofstream output("resultats_2D_finer.csv");
// output << "(X(m), U (m), V(m)" << endl;
// for (int i=0; i<nCut; i++){
//     x = L*(i/real(nCut)-0.5);
//     output << x << ", " << u1(x,y) << ", " << v1(x,y) << endl; 
// }

// // Movemesh
// mesh th1 = movemesh(Th, [x+u1, y+v1]);
// plot(Th, th1, wait=true);











